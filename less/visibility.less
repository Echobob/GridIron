.responsive-visibility() {
  	display: block !important;
}

.responsive-invisibility() {
  	display: none !important;
}


//Visible
.visibility_mixins(initial_breakpoints) {
	@index: 1;
	@count: (@num_breakpoints * 2);

		.make_loop(@index) when (@index = 1) {
			@name: 	extract(@breakpoints, @index);
			@min: 	0px;
			@max: 	extract(@breakpoints, @index + 2);

			.visible-@{name} {
				display: block !important;
			}
			.visible-@{name} {
			  	@media (min-width: @min) and (max-width: @max) {
					.responsive-visibility();
			  	}
			}			
			.visible-@{name}-block {
			  	@media (min-width: @min) and (max-width: @max) {
					display: block !important;
			  	}
			}
			.visible-@{name}-inline {
			  	@media (min-width: @min) and (max-width: @max) {
					display: inline !important;
			  	}
			}
			.visible-@{name}-inline-block {
			  	@media (min-width: @min) and (max-width: @max) {
					display: inline-block !important;
			  	}
			}
			.hidden-@{name} {
				@media (min-width: @min) and (max-width: @max) {
			  		.responsive-invisibility();
				}
			}
		.make_loop((@index + 2));
	}

	.make_loop(@index) when (@index > 1) and (@index < @count){
		@name: 	extract(@breakpoints, @index + 1);
		@min: 	extract(@breakpoints, @index);
		@max: 	extract(@breakpoints, (@index + 2));
		.make_loop((@index + 2));
	}
}